name: Triton Stable Build

on:
  workflow_dispatch:
    inputs:
      build_architecture:
        description: '🏗️ Architecture for the release build'
        type: choice
        options:
        - x86_64
        - aarch64
        - all
        default: 'all'

jobs:
  # ===================================================================
  # JOB 1: Discover tag AND prepare the matrix in a single step
  # ===================================================================
  prepare-release-build:
    runs-on: ['self-hosted', 'x64-docker']
    outputs:
      tag: ${{ steps.discover-tag.outputs.tag }}
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Get latest Triton tag via GitHub API
        id: discover-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! command -v jq &> /dev/null; then echo "::error::'jq' not installed."; exit 1; fi
          latest_tag=$(curl -sL -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GH_TOKEN" https://api.github.com/repos/triton-lang/triton/tags | jq -r '.[0].name')
          if [ -z "$latest_tag" ] || [ "$latest_tag" == "null" ]; then echo "::error::Failed to fetch tag."; exit 1; fi
          echo "Discovered latest Triton tag: ${latest_tag}"
          echo "tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Generate execution matrix for release
        id: generate-matrix
        run: |
          arch_choice="${{ github.event.inputs.build_architecture }}"

          # Define configurations for each architecture
          x64_config="{\"config\": {\"runs_on\": \"['self-hosted', 'x64-docker']\", \"arch\": \"x86_64\", \"timeout\": 120}}"
          aarch64_config="{\"config\": {\"runs_on\": \"['self-hosted', 'aarch64-docker']\", \"arch\": \"aarch64\", \"timeout\": 720}}"

          # Build the final JSON matrix string
          matrix_content=""
          if [[ "$arch_choice" == "x86_64" || "$arch_choice" == "all" ]]; then
            matrix_content="$x64_config"
          fi
          if [[ "$arch_choice" == "aarch64" || "$arch_choice" == "all" ]]; then
            if [ -n "$matrix_content" ]; then
              matrix_content="$matrix_content,$aarch64_config"
            else
              matrix_content="$aarch64_config"
            fi
          fi

          # Wrap the content in the final JSON structure
          final_matrix="{\"include\":[$matrix_content]}"
          echo "Generated Matrix for Release: $final_matrix"
          echo "matrix=$final_matrix" >> $GITHUB_OUTPUT

  # ===================================================================
  # JOB 2: Execute the release build using the combined outputs
  # ===================================================================
  execute-release-build:
    needs: prepare-release-build
    if: needs.prepare-release-build.outputs.tag != '' && needs.prepare-release-build.outputs.matrix != ''
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-release-build.outputs.matrix) }}
    uses: ./.github/workflows/reusable-build-triton.yml
    with:
      runner: ${{ matrix.config.runs_on }}
      arch: ${{ matrix.config.arch }}
      timeout: ${{ matrix.config.timeout }}
      checkout-ref: ${{ needs.prepare-release-build.outputs.tag }} # Use output from the single 'needs' job
      package-name: 'triton'
      cibw-build: 'cp3*-manylinux_${{ matrix.config.arch }}'
      cibw-skip: 'cp{35,36,37,38,39}-*'
    secrets: inherit
